{"$message_type":"diagnostic","message":"unknown start of token: \\u{201c}","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":602,"byte_end":605,"line_start":23,"line_end":23,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"“Notice the &name when calling the function? That’s a borrow.","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode characters '“' (Left Double Quotation Mark) and '”' (Right Double Quotation Mark) look like '\"' (Quotation Mark), but are not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":602,"byte_end":928,"line_start":23,"line_end":25,"column_start":1,"column_end":157,"is_primary":true,"text":[{"text":"“Notice the &name when calling the function? That’s a borrow.","highlight_start":1,"highlight_end":62},{"text":"We’re saying: hey, print_length, you can look at this data, but don’t take ownership of it.","highlight_start":1,"highlight_end":92},{"text":"This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”","highlight_start":1,"highlight_end":157}],"label":null,"suggested_replacement":"\"Notice the &name when calling the function? That’s a borrow.\nWe’re saying: hey, print_length, you can look at this data, but don’t take ownership of it.\nThis lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unknown start of token: \\u{201c}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:23:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m“Notice the &name when calling the function? That’s a borrow.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode characters '“' (Left Double Quotation Mark) and '”' (Right Double Quotation Mark) look like '\"' (Quotation Mark), but are not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \"Notice the &name when calling the function? That’s a borrow.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ We’re saying: hey, print_length, you can look at this data, but don’t take ownership of it.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\u{2019}","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":653,"byte_end":656,"line_start":23,"line_end":23,"column_start":50,"column_end":51,"is_primary":true,"text":[{"text":"“Notice the &name when calling the function? That’s a borrow.","highlight_start":50,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":653,"byte_end":656,"line_start":23,"line_end":23,"column_start":50,"column_end":51,"is_primary":true,"text":[{"text":"“Notice the &name when calling the function? That’s a borrow.","highlight_start":50,"highlight_end":51}],"label":null,"suggested_replacement":"'","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unknown start of token: \\u{2019}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:23:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m“Notice the &name when calling the function? That’s a borrow.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m“Notice the &name when calling the function? That\u001b[0m\u001b[0m\u001b[38;5;9m’s \u001b[0m\u001b[0ma borrow.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m“Notice the &name when calling the function? That\u001b[0m\u001b[0m\u001b[38;5;10m'\u001b[0m\u001b[0ms a borrow.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\u{2019}","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":670,"byte_end":673,"line_start":24,"line_end":24,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"We’re saying: hey, print_length, you can look at this data, but don’t take ownership of it.","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":670,"byte_end":673,"line_start":24,"line_end":24,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"We’re saying: hey, print_length, you can look at this data, but don’t take ownership of it.","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"'","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unknown start of token: \\u{2019}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:24:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mWe’re saying: hey, print_length, you can look at this data, but don’t take ownership of it.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mWe\u001b[0m\u001b[0m\u001b[38;5;9m’re\u001b[0m\u001b[0m saying: hey, print_length, you can look at this data, but don’t take ownership of it.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mWe\u001b[0m\u001b[0m\u001b[38;5;10m'\u001b[0m\u001b[0mre saying: hey, print_length, you can look at this data, but don’t take ownership of it.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\u{2019}","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":737,"byte_end":740,"line_start":24,"line_end":24,"column_start":68,"column_end":69,"is_primary":true,"text":[{"text":"We’re saying: hey, print_length, you can look at this data, but don’t take ownership of it.","highlight_start":68,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":737,"byte_end":740,"line_start":24,"line_end":24,"column_start":68,"column_end":69,"is_primary":true,"text":[{"text":"We’re saying: hey, print_length, you can look at this data, but don’t take ownership of it.","highlight_start":68,"highlight_end":69}],"label":null,"suggested_replacement":"'","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unknown start of token: \\u{2019}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:24:68\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mWe’re saying: hey, print_length, you can look at this data, but don’t take ownership of it.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mWe’re saying: hey, print_length, you can look at this data, but don\u001b[0m\u001b[0m\u001b[38;5;9m’t \u001b[0m\u001b[0mtake ownership of it.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mWe’re saying: hey, print_length, you can look at this data, but don\u001b[0m\u001b[0m\u001b[38;5;10m'\u001b[0m\u001b[0mt take ownership of it.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\u{2014}","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":802,"byte_end":805,"line_start":25,"line_end":25,"column_start":39,"column_end":40,"is_primary":true,"text":[{"text":"This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”","highlight_start":39,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character '—' (Em Dash) looks like '-' (Minus/Hyphen), but it is not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":802,"byte_end":805,"line_start":25,"line_end":25,"column_start":39,"column_end":40,"is_primary":true,"text":[{"text":"This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”","highlight_start":39,"highlight_end":40}],"label":null,"suggested_replacement":"-","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unknown start of token: \\u{2014}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:25:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mThis lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no le\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character '—' (Em Dash) looks like '-' (Minus/Hyphen), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mThis lets us use name again in main() \u001b[0m\u001b[0m\u001b[38;5;9m— a\u001b[0m\u001b[0mnd Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mThis lets us use name again in main() \u001b[0m\u001b[0m\u001b[38;5;10m-\u001b[0m\u001b[0m and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\u{2019}","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":814,"byte_end":817,"line_start":25,"line_end":25,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”","highlight_start":49,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":814,"byte_end":817,"line_start":25,"line_end":25,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”","highlight_start":49,"highlight_end":50}],"label":null,"suggested_replacement":"'","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unknown start of token: \\u{2019}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:25:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mThis lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no le\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mThis lets us use name again in main() — and Rust\u001b[0m\u001b[0m\u001b[38;5;9m’s \u001b[0m\u001b[0mcompiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mThis lets us use name again in main() — and Rust\u001b[0m\u001b[0m\u001b[38;5;10m'\u001b[0m\u001b[0ms compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\u{2019}","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":845,"byte_end":848,"line_start":25,"line_end":25,"column_start":78,"column_end":79,"is_primary":true,"text":[{"text":"This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”","highlight_start":78,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":845,"byte_end":848,"line_start":25,"line_end":25,"column_start":78,"column_end":79,"is_primary":true,"text":[{"text":"This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”","highlight_start":78,"highlight_end":79}],"label":null,"suggested_replacement":"'","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unknown start of token: \\u{2019}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:25:78\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mThis lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no le\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character '’' (Right Single Quotation Mark) looks like ''' (Single Quote), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mThis lets us use name again in main() — and Rust’s compiler guarantees we can\u001b[0m\u001b[0m\u001b[38;5;9m’t \u001b[0m\u001b[0maccidentally mess with memory safety. No segfaults, no leaks, no GC needed.”\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mThis lets us use name again in main() — and Rust’s compiler guarantees we can\u001b[0m\u001b[0m\u001b[38;5;10m'\u001b[0m\u001b[0mt accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\u{201d}","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":925,"byte_end":928,"line_start":25,"line_end":25,"column_start":156,"column_end":157,"is_primary":true,"text":[{"text":"This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”","highlight_start":156,"highlight_end":157}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"Unicode character '”' (Right Double Quotation Mark) looks like '\"' (Quotation Mark), but it is not","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":925,"byte_end":928,"line_start":25,"line_end":25,"column_start":156,"column_end":157,"is_primary":true,"text":[{"text":"This lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.”","highlight_start":156,"highlight_end":157}],"label":null,"suggested_replacement":"\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unknown start of token: \\u{201d}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:25:156\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0mlly mess with memory safety. No segfaults, no leaks, no GC needed.”\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: Unicode character '”' (Right Double Quotation Mark) looks like '\"' (Quotation Mark), but it is not\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mThis lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.\u001b[0m\u001b[0m\u001b[38;5;9m”\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mThis lets us use name again in main() — and Rust’s compiler guarantees we can’t accidentally mess with memory safety. No segfaults, no leaks, no GC needed.\u001b[0m\u001b[0m\u001b[38;5;10m\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected one of `!` or `::`, found `the`","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":612,"byte_end":615,"line_start":23,"line_end":23,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"“Notice the &name when calling the function? That’s a borrow.","highlight_start":9,"highlight_end":12}],"label":"expected one of `!` or `::`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `!` or `::`, found `the`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:23:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m“Notice the &name when calling the function? That’s a borrow.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `!` or `::`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 9 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 9 previous errors\u001b[0m\n\n"}
